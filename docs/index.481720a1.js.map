{"mappings":"ACAA,MAAM,EAAgB,SAAS,cAAc,CAAC,iBACxC,EAAa,SAAS,cAAc,CAAC,cACrC,EAAe,SAAS,cAAc,CAAC,SACvC,EAAiB,SAAS,cAAc,CAAC,aACzC,EAAe,SAAS,cAAc,CAAC,OAGvC,EAAc,CAClB,EAAG,CAAC,IAAK,EAAE,CACX,EAAG,CAAC,IAAK,EAAE,CACX,EAAG,CAAC,EAAG,IAAI,CACX,EAAG,CAAC,EAAG,IAAI,CACX,EAAG,CAAC,IAAK,EAAE,CACX,EAAG,CAAC,IAAK,EAAE,AACb,EA0CA,SAAS,EAAa,CAAK,EACzB,EAAc,SAAS,CAAG,GAE1B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,IAAK,CAC9B,IAAM,EAAO,AAMjB,WACE,IAAM,EAAO,SAAS,aAAa,CAAC,OACpC,EAAK,SAAS,CAAC,GAAG,CAAC,QAEnB,IAAM,EAAO,SAAS,aAAa,CAAC,OACpC,EAAK,SAAS,CAAC,GAAG,CAAC,QAGnB,IAAM,EAAS,CACb,MAAO,CACL,mGACA,mGACA,mGACA,mGACA,mGACA,mGACD,CACD,KAAM,CACJ,oGACA,oGACA,oGACA,oGACA,oGACA,oGACD,AACH,EAEM,EAAQ,SAAS,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAe,OAAS,QAUvE,MARA,AAtBc,CAAC,QAAS,OAAQ,QAAS,OAAQ,MAAO,SAAS,CAsB3D,OAAO,CAAC,CAAC,EAAM,KACnB,IAAM,EAAU,SAAS,aAAa,CAAC,OACvC,EAAQ,SAAS,CAAC,GAAG,CAAC,GACtB,EAAQ,KAAK,CAAC,eAAe,CAAG,CAAC,IAAI,EAAE,CAAM,CAAC,EAAM,CAAC,EAAM,CAAC,CAAC,CAAC,CAC9D,EAAK,WAAW,CAAC,EACnB,GAEA,EAAK,WAAW,CAAC,GACV,CACT,IA3CI,EAAc,WAAW,CAAC,EAC5B,CACF,CA9CA,EAAe,gBAAgB,CAAC,QAAS,AAAC,IACxC,IAAI,EAAY,SAAS,EAAe,KAAK,EAExC,MAAM,GAWT,EAAY,EAVR,AAAoB,oBAApB,EAAM,SAAS,EAA0B,AAAoB,eAApB,EAAM,SAAS,CAC1D,EAAY,KAAK,GAAG,CAAC,EAAG,KAAK,GAAG,CAAC,EAAG,IAEhC,EAAY,EACd,EAAY,EACH,EAAY,GACrB,CAAA,EAAY,CAAA,EAOlB,EAAe,KAAK,CAAG,EACvB,EAAa,EACf,GAGA,EAAW,gBAAgB,CAAC,QAAS,KACnC,IAAM,EAAQ,SAAS,gBAAgB,CAAC,SACpC,EAAQ,EAEZ,EAAM,OAAO,CAAC,AAAC,IACb,IAAM,EAAO,KAAK,KAAK,CAAC,AAAgB,EAAhB,KAAK,MAAM,IAAU,EAC7C,GAAS,EAET,GAAM,CAAC,EAAW,EAAU,CAAG,CAAW,CAAC,EAAK,AAChD,CAAA,EAAK,KAAK,CAAC,SAAS,CAAG,CAAC,QAAQ,EAAE,EAAU,aAAa,EAAE,EAAU,IAAI,CAAC,CAC1E,EAAK,YAAY,CAAC,aAAc,EAClC,GAEA,EAAa,WAAW,CAAG,CAAC,CAAC,EAAE,EAAA,CAAO,AACxC,GAsDA,EAAa,gBAAgB,CAAC,SAAU,KACtC,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,aAG/B,EAAa,SAAS,EAAe,KAAK,EAC5C,GAGA,EAAa","sources":["<anon>","scr/script.js"],"sourcesContent":["const diceContainer = document.getElementById(\"diceContainer\");\nconst rollButton = document.getElementById(\"rollButton\");\nconst totalDisplay = document.getElementById(\"total\");\nconst diceCountInput = document.getElementById(\"diceCount\");\nconst toggleSwitch = document.getElementById(\"btn\");\n// Map of dice face values to rotation angles\nconst diceFaceMap = {\n    1: [\n        360,\n        0\n    ],\n    2: [\n        540,\n        0\n    ],\n    3: [\n        0,\n        270\n    ],\n    4: [\n        0,\n        450\n    ],\n    5: [\n        270,\n        0\n    ],\n    6: [\n        450,\n        0\n    ]\n};\n// Handle dice count input changes\ndiceCountInput.addEventListener(\"input\", (event)=>{\n    let diceCount = parseInt(diceCountInput.value);\n    if (!isNaN(diceCount)) {\n        if (event.inputType === \"insertFromPaste\" || event.inputType === \"insertText\") diceCount = Math.min(5, Math.max(1, diceCount));\n        else {\n            if (diceCount > 5) diceCount = 1;\n            else if (diceCount < 1) diceCount = 5;\n        }\n    } else diceCount = 1;\n    diceCountInput.value = diceCount;\n    generateDice(diceCount);\n});\n// Event listener for rolling the dice\nrollButton.addEventListener(\"click\", ()=>{\n    const cubes = document.querySelectorAll(\".cube\");\n    let total = 0;\n    cubes.forEach((cube)=>{\n        const roll = Math.floor(Math.random() * 6) + 1;\n        total += roll;\n        const [xRotation, yRotation] = diceFaceMap[roll];\n        cube.style.transform = `rotateX(${xRotation}deg) rotateY(${yRotation}deg)`;\n        cube.setAttribute(\"data-value\", roll);\n    });\n    totalDisplay.textContent = ` ${total}`;\n});\n// Function to generate dice\nfunction generateDice(count) {\n    diceContainer.innerHTML = \"\";\n    for(let i = 0; i < count; i++){\n        const dice = createDice();\n        diceContainer.appendChild(dice);\n    }\n}\n// Function to create a single dice element\nfunction createDice() {\n    const dice = document.createElement(\"div\");\n    dice.classList.add(\"dice\");\n    const cube = document.createElement(\"div\");\n    cube.classList.add(\"cube\");\n    const faces = [\n        \"front\",\n        \"back\",\n        \"right\",\n        \"left\",\n        \"top\",\n        \"bottom\"\n    ];\n    const images = {\n        light: [\n            \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738056273/dice/dark/gtrjmcia0o7jlnqdauu3.png\",\n            \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738056273/dice/dark/x0u4qui4balu01ldjgjq.png\",\n            \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738056273/dice/dark/b1eownany08x6muu3k4b.png\",\n            \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738056273/dice/dark/haiwggj9z0bv3epfyzbb.png\",\n            \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738056274/dice/dark/lykt2tuohniu9avosznf.png\",\n            \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738056274/dice/dark/powtjgng7oxiasqwk2dv.png\"\n        ],\n        dark: [\n            \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738146218/dice/light/x3b7yzjr62vky2uyimq5.png\",\n            \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738146218/dice/light/dklkl2mrpc7yhqlax43x.png\",\n            \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738146218/dice/light/tyxxuuxhf82jgxx2mzuc.png\",\n            \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738146219/dice/light/gvfurqjix7fy9aqvfyop.png\",\n            \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738146219/dice/light/ezvvlhkqhzciwoi14odb.png\",\n            \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738146219/dice/light/wyxvkstoeqfdempkhevv.png\"\n        ]\n    };\n    const theme = document.body.classList.contains(\"dark-mode\") ? \"dark\" : \"light\";\n    faces.forEach((face, index)=>{\n        const faceDiv = document.createElement(\"div\");\n        faceDiv.classList.add(face);\n        faceDiv.style.backgroundImage = `url(${images[theme][index]})`;\n        cube.appendChild(faceDiv);\n    });\n    dice.appendChild(cube);\n    return dice;\n}\n// Dark Mode Toggle\ntoggleSwitch.addEventListener(\"change\", ()=>{\n    document.body.classList.toggle(\"dark-mode\");\n    // Update dice images when toggling theme\n    generateDice(parseInt(diceCountInput.value));\n});\n// Initialize with one dice\ngenerateDice(1);\n\n//# sourceMappingURL=index.481720a1.js.map\n","const diceContainer = document.getElementById(\"diceContainer\");\r\nconst rollButton = document.getElementById(\"rollButton\");\r\nconst totalDisplay = document.getElementById(\"total\");\r\nconst diceCountInput = document.getElementById(\"diceCount\");\r\nconst toggleSwitch = document.getElementById(\"btn\");\r\n\r\n// Map of dice face values to rotation angles\r\nconst diceFaceMap = {\r\n  1: [360, 0],\r\n  2: [540, 0],\r\n  3: [0, 270],\r\n  4: [0, 450],\r\n  5: [270, 0],\r\n  6: [450, 0],\r\n};\r\n\r\n// Handle dice count input changes\r\ndiceCountInput.addEventListener(\"input\", (event) => {\r\n  let diceCount = parseInt(diceCountInput.value);\r\n\r\n  if (!isNaN(diceCount)) {\r\n    if (event.inputType === \"insertFromPaste\" || event.inputType === \"insertText\") {\r\n      diceCount = Math.min(5, Math.max(1, diceCount));\r\n    } else {\r\n      if (diceCount > 5) {\r\n        diceCount = 1;\r\n      } else if (diceCount < 1) {\r\n        diceCount = 5;\r\n      }\r\n    }\r\n  } else {\r\n    diceCount = 1;\r\n  }\r\n\r\n  diceCountInput.value = diceCount;\r\n  generateDice(diceCount);\r\n});\r\n\r\n// Event listener for rolling the dice\r\nrollButton.addEventListener(\"click\", () => {\r\n  const cubes = document.querySelectorAll(\".cube\");\r\n  let total = 0;\r\n\r\n  cubes.forEach((cube) => {\r\n    const roll = Math.floor(Math.random() * 6) + 1;\r\n    total += roll;\r\n\r\n    const [xRotation, yRotation] = diceFaceMap[roll];\r\n    cube.style.transform = `rotateX(${xRotation}deg) rotateY(${yRotation}deg)`;\r\n    cube.setAttribute(\"data-value\", roll);\r\n  });\r\n\r\n  totalDisplay.textContent = ` ${total}`;\r\n});\r\n\r\n// Function to generate dice\r\nfunction generateDice(count) {\r\n  diceContainer.innerHTML = \"\";\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const dice = createDice();\r\n    diceContainer.appendChild(dice);\r\n  }\r\n}\r\n\r\n// Function to create a single dice element\r\nfunction createDice() {\r\n  const dice = document.createElement(\"div\");\r\n  dice.classList.add(\"dice\");\r\n\r\n  const cube = document.createElement(\"div\");\r\n  cube.classList.add(\"cube\");\r\n\r\n  const faces = [\"front\", \"back\", \"right\", \"left\", \"top\", \"bottom\"];\r\n  const images = {\r\n    light: [\r\n      \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738056273/dice/dark/gtrjmcia0o7jlnqdauu3.png\",\r\n      \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738056273/dice/dark/x0u4qui4balu01ldjgjq.png\",\r\n      \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738056273/dice/dark/b1eownany08x6muu3k4b.png\",\r\n      \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738056273/dice/dark/haiwggj9z0bv3epfyzbb.png\",\r\n      \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738056274/dice/dark/lykt2tuohniu9avosznf.png\",\r\n      \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738056274/dice/dark/powtjgng7oxiasqwk2dv.png\",\r\n    ],\r\n    dark: [\r\n      \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738146218/dice/light/x3b7yzjr62vky2uyimq5.png\",\r\n      \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738146218/dice/light/dklkl2mrpc7yhqlax43x.png\",\r\n      \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738146218/dice/light/tyxxuuxhf82jgxx2mzuc.png\",\r\n      \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738146219/dice/light/gvfurqjix7fy9aqvfyop.png\",\r\n      \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738146219/dice/light/ezvvlhkqhzciwoi14odb.png\",\r\n      \"https://res.cloudinary.com/drkmgpcad/image/upload/v1738146219/dice/light/wyxvkstoeqfdempkhevv.png\",\r\n    ],\r\n  };\r\n\r\n  const theme = document.body.classList.contains(\"dark-mode\") ? \"dark\" : \"light\";\r\n\r\n  faces.forEach((face, index) => {\r\n    const faceDiv = document.createElement(\"div\");\r\n    faceDiv.classList.add(face);\r\n    faceDiv.style.backgroundImage = `url(${images[theme][index]})`;\r\n    cube.appendChild(faceDiv);\r\n  });\r\n\r\n  dice.appendChild(cube);\r\n  return dice;\r\n}\r\n\r\n// Dark Mode Toggle\r\ntoggleSwitch.addEventListener(\"change\", () => {\r\n  document.body.classList.toggle(\"dark-mode\");\r\n\r\n  // Update dice images when toggling theme\r\n  generateDice(parseInt(diceCountInput.value));\r\n});\r\n\r\n// Initialize with one dice\r\ngenerateDice(1);\r\n"],"names":["diceContainer","document","getElementById","rollButton","totalDisplay","diceCountInput","toggleSwitch","diceFaceMap","generateDice","count","innerHTML","i","dice","createDice","createElement","classList","add","cube","images","light","dark","theme","body","contains","faces","forEach","face","index","faceDiv","style","backgroundImage","appendChild","addEventListener","event","diceCount","parseInt","value","isNaN","inputType","Math","min","max","cubes","querySelectorAll","total","roll","floor","random","xRotation","yRotation","transform","setAttribute","textContent","toggle"],"version":3,"file":"index.481720a1.js.map"}